{"version":3,"sources":["components/ContactForm/ContactForm.module.scss","components/ContactList/ContactList.module.scss","components/Filter/Filter.module.scss","components/Logo/Logo.module.scss","components/Container/Container.module.scss","App.module.scss","redux/contacts/contacts-actions.js","redux/contacts/contacts-reducer.js","redux/store.js","components/Container/Container.jsx","components/Logo/Logo.jsx","components/ContactForm/ContactForm.jsx","components/ContactForm/ContactForm.container.jsx","components/Filter/Filter.jsx","components/Filter/Filter.container.jsx","components/ContactList/ContactList.jsx","components/ContactList/ContactList.container.jsx","App.js","index.js"],"names":["module","exports","addContact","createAction","name","number","payload","id","nanoid","deleteContact","changeFilter","items","createReducer","actions","state","filter","_","combineReducers","contactsPersistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contacts","persistReducer","contactsReducer","devTools","process","persistor","persistStore","Container","children","className","styles","container","defaultProps","Logo","itemRef","createRef","CSSTransition","in","appear","timeout","classNames","nodeRef","title","ref","ContactForm","hanldeChange","event","currentTarget","value","setState","hanldeSubmit","preventDefault","props","normalizedName","toLowerCase","nameInContacts","find","contact","numberInContacts","onSubmit","resetForm","toast","info","autoClose","form","this","label","type","placeholder","aria-label","input","onChange","pattern","required","button__wrapper","button","Component","connect","dispatch","contactsActions","Filter","distatch","ContactList","onDeleteContact","ul","list","map","item","onClick","getfilteredContacts","allContacts","normalizedFilter","includes","App","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.b96f9a5c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1NiH1\",\"label\":\"ContactForm_label__3KgVy\",\"input\":\"ContactForm_input__3emgF\",\"button__wrapper\":\"ContactForm_button__wrapper__10pWt\",\"button\":\"ContactForm_button__1007G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ContactList_button__197mh\",\"list\":\"ContactList_list__3wSXY\",\"item\":\"ContactList_item__3lf8n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Filter_title__3_E9_\",\"label\":\"Filter_label__2pNgv\",\"input\":\"Filter_input__YmgBH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Logo_title__3pL6O\",\"appear\":\"Logo_appear__2M5xV\",\"appearActive\":\"Logo_appearActive__1Ek1Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__3eZVY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__15LM-\"};","import { createAction } from '@reduxjs/toolkit'; // Импорт функции создания экшена\nimport { nanoid } from 'nanoid';\n\n// Создание экшена для добавления контакта: type + payload + Prepare Callback\nconst addContact = createAction('contacts/add', (name, number) => ({\n  payload: {\n    id: nanoid(),\n    name,\n    number,\n  },\n}));\n\n// Создание экшена для удаления контакта\nconst deleteContact = createAction('contacts/delete');\n\n// Создание экшена для фильтра\nconst changeFilter = createAction('contacts/change-filter');\n\n// eslint-disable-next-line\nexport default { addContact, deleteContact, changeFilter };\n","import { combineReducers } from 'redux'; // Импорт функции комбайна редюсеров\nimport { createReducer } from '@reduxjs/toolkit'; // Импорт функции создания редюсера\n\nimport actions from './contacts-actions'; // Импорт экшенов из контактов\n\n// Создание редюсера для массива items в контактах (добавление контакта и удаление)\nconst items = createReducer([], {\n  [actions.addContact]: (state, { payload }) => [payload, ...state],\n  [actions.deleteContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\n// Создание редюсера для фильтра в контактах\nconst filter = createReducer('', {\n  [actions.changeFilter]: (_, { payload }) => payload,\n});\n\n// Экспорт всех редюсеров через комбайн\nexport default combineReducers({ items, filter });\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'; // Импорт функции создания хранилища и прослойки\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist'; // Импорт функции персистеров и фикса консоли\nimport storage from 'redux-persist/lib/storage'; // Импорт локального хранилища из библиотеки персиста\nimport logger from 'redux-logger'; // Импорт функции логгирования\nimport contactsReducer from './contacts/contacts-reducer'; // Импорт редюсера по контактам\n\n// Конфиг персиста для контактов с блеклистом\nconst contactsPersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\n// Создание прослоек + логгер. Важен порядок!\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\n// Создание хранилища (корневой редюсер + прослойки + тулзы только для разработки)\nconst store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\n// Обёртка хранилища в персистор\nconst persistor = persistStore(store);\n\n// Экспорт хранилища и обёртки хранилища\n// eslint-disable-next-line\nexport default { store, persistor };\n","import PropTypes from 'prop-types';\nimport styles from './Container.module.scss';\n\nconst Container = ({ children }) => (\n  <div className={styles.container}>{children}</div>\n);\n\nContainer.defaultProps = {\n  children: [],\n};\n\nContainer.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default Container;\n","import React, { createRef } from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nimport styles from './Logo.module.scss';\n\nconst Logo = () => {\n  const itemRef = createRef(null);\n\n  return (\n    <CSSTransition\n      in={true}\n      appear={true}\n      timeout={500}\n      classNames={styles}\n      nodeRef={itemRef}\n    >\n      <h1 className={styles.title} ref={itemRef}>\n        Phonebook\n      </h1>\n    </CSSTransition>\n  );\n};\n\nexport default Logo;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { ToastContainer, toast } from 'react-toastify';\n\n\nimport styles from './ContactForm.module.scss';\nimport 'react-toastify/dist/ReactToastify.css';\n\nclass ContactForm extends Component {\n  // Стейт формы\n  state = {\n    name: '',\n    number: '',\n  };\n\n  // Следит за инпутом и пишет в локальный стейт его значение\n  hanldeChange = event => {\n    const { name, value } = event.currentTarget;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  // Метод на отправке формы. Формирует из стейта контакт и передает во внешний метод\n  hanldeSubmit = event => {\n    event.preventDefault();\n\n    const { name, number } = this.state;\n    const { contacts } = this.props;\n    const normalizedName = name.toLowerCase();\n\n    // Проверка на дубликат по имени\n    const nameInContacts = contacts.find(\n      contact => contact.name === normalizedName,\n    );\n\n    // Проверка на дубликат по номеру\n     const numberInContacts = contacts.find(\n      contact => contact.number === number,\n    );\n\n    // Отправка данных после проверки в экшн\n    if (!nameInContacts && !numberInContacts) {\n      this.props.onSubmit(normalizedName, number);\n      this.resetForm();\n      return;\n    }\n\n    toast.info(`${name} is already in contacts`, {\n      autoClose: 2500,\n    });\n  };\n\n  // Сброс полей формы (после отправки)\n  resetForm = () => {\n    this.setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  render() {\n    return (\n      <form className={styles.form} onSubmit={this.hanldeSubmit}>\n        <label className={styles.label}>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Contact name\"\n            aria-label=\"Input for your name\"\n            className={styles.input}\n            value={this.state.name} // Пишет значение в локальный стейт\n            onChange={this.hanldeChange} // Наблюдающий метод\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n\n        <label className={styles.label}>\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"Phone number\"\n            aria-label=\"Input for your phone number\"\n            className={styles.input}\n            value={this.state.number} // Пишет значение в локальный стейт\n            onChange={this.hanldeChange} // Наблюдающий метод\n            pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\n            title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n        <div className={styles.button__wrapper}>\n        <button className ={styles.button}type='submit'>\n        Add contact\n        </button>\n        </div>\n\n        <ToastContainer />\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default ContactForm;\n","import { connect } from 'react-redux'; // Импорт функции коннекта к хранилищу\nimport contactsActions from '../../redux/contacts/contacts-actions'; // Импорт экшенов из контактов\n\nimport ContactForm from './ContactForm';\n\n// Из глобального стейта в пропы компонента\nconst mapStateToProps = state => ({\n  contacts: state.contacts.items,\n});\n\n// Из глобального стейта в пропы компонента - методы\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: (name, number) =>\n    dispatch(contactsActions.addContact(name, number)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import PropTypes from 'prop-types';\n\nimport styles from './Filter.module.scss';\n\n// Принимает значение с поля фильтра и метод пишущий в стейт\nconst Filter = ({ value, onChange }) => {\n  return (\n    <div>\n      <h2 className={styles.title}>Contacts</h2>\n\n      <label className={styles.label}>\n        Find contacts by name\n        <input\n          type=\"text\"\n          name=\"filter\"\n          placeholder=\"Find...\"\n          className={styles.input}\n          value={value}\n          onChange={onChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n    </div>\n  );\n};\n\nFilter.defaultProps = {\n  value: '',\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import { connect } from 'react-redux';\nimport contactsActions from '../../redux/contacts/contacts-actions';\n\nimport Filter from './Filter';\n\nconst mapStateToProps = state => ({\n  value: state.contacts.filter,\n});\n\nconst mapDispatchToProps = distatch => ({\n  onChange: event =>\n    distatch(contactsActions.changeFilter(event.currentTarget.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './ContactList.module.scss';\n\n\nconst ContactList = ({ contacts, onDeleteContact }) => {\n    return(\n      <div className={styles.ul}>\n        <ul className={styles.list}>\n            {contacts.map(contact =>(\n              <li  className={styles.item}key={contact.id}>\n                  {contact.name}:{contact.number}\n                  <button className={styles.button}\n                  type ='button'\n                  onClick= {()=> onDeleteContact(contact.id)}>\n                      Delete\n                  </button>\n              </li>  \n            ))}\n        </ul>\n        </div>\n    );\n\n};\n\nContactList.propTypes = {\nvalue: PropTypes.string,\ncontacts: PropTypes.arrayOf(\n    PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string,\n        number: PropTypes.number,\n    }),\n),\nonDeleteContact: PropTypes.func,\n}\n\nexport default ContactList;\n","import { connect } from 'react-redux'; // Импортируем коннект для глобального хранилища\nimport contactsActions from '../../redux/contacts/contacts-actions'; // Импортируем экшны для диспатчинга\n\nimport ContactList from './ContactList';\n\n// // Фильтрует и возвращает результат фильтра\nconst getfilteredContacts = (allContacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n\n  return allContacts.filter(({ name }) =>\n    name.toLowerCase().includes(normalizedFilter),\n  );\n};\n\n// Из стейта в пропы + в контакты пишет результат функции фильтра\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\n  contacts: getfilteredContacts(items, filter),\n});\n\n// Из стейта в пропы - методы\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContact: id => dispatch(contactsActions.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import Container from './components/Container';\nimport Logo from './components/Logo';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\nimport ContactList from './components/ContactList';\n\nconst App = () => {\n  return (\n    <Container>\n      <Logo />\n\n      <ContactForm />\n\n      <Filter />\n\n      <ContactList />\n    </Container>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux'; // Импорт провайдера для хранилища\nimport { PersistGate } from 'redux-persist/integration/react'; // Импорт гейта для персиста\nimport store from './redux/store'; // Импорт обьекта из стора (хранилище и персистор)\n\nimport App from './App.js';\n\nimport 'modern-normalize/modern-normalize.css';\nimport './App.module.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}